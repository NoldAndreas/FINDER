theme(aspect.ratio = 0.5)
p1 <- ggplot(data=movies,aes(x=feature_film,y=audience_score)) + geom_boxplot() +
labs(x = "Feature film",y='Audience score') +
theme(aspect.ratio = 0.5)
p2 <- ggplot(data=movies,aes(x=drama,y=audience_score)) + geom_boxplot() +
labs(x = "Drama",y='Audience score') +
theme(aspect.ratio = 0.5)
p3 <- ggplot(data=movies,aes(x=mpaa_rating_R,y=audience_score)) + geom_boxplot() +
labs(x = "R-Rated",y='Audience score') +
theme(aspect.ratio = 0.5)
p4 <- ggplot(data=movies,aes(x=oscar_season,y=audience_score)) + geom_boxplot() +
labs(x = "Oscar Season",y='Audience score') +
theme(aspect.ratio = 0.5)
p5 <- ggplot(data=movies,aes(x=summer_season,y=audience_score)) + geom_boxplot() +
labs(x = "Summer season",y='Audience score') +
theme(aspect.ratio = 0.5)
p0
p1
p2
p3
p4
p5
#wage_no_na <- na.omit(wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- bas.lm(lwage ~ . -audience_score, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- bas.lm(audience_score, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- bas.lm(audience_score, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score, data = movies)
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(movies$audience_score, data = movies)
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score, data = movies)
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score.-., data = movies)
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score  ~ . -wage, data = movies),
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score  ~ . -wage, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- lm(audience_score  ~ . -, data = movies,
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- bas.lm(audience_score  ~ . -, data = movies,
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_audience_score <- bas.lm(audience_score, data = movies,
prior = "BIC",
modelprior = uniform())
#wage_no_na <- na.omit(wage)
#lm(wage ~ iq, data = wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
movies_no_na <- na.omit(movies)
bma_audience_score <- bas.lm(audience_score, data = movies_no_na,
prior = "BIC",
modelprior = uniform())
library('SPARK')
library('SPARK')
install.packages("~/Documents/Output/Learning/SpatialTranscriptomics/SPARK/Andreas_Try/Spark.zip", repos = NULL, type = "win.binary")
install.packages("~/Documents/Output/Learning/SpatialTranscriptomics/SPARK/Andreas_Try/Spark.tgz", repos = NULL, type = .Platform$pkgType)
load("Layer2_BC_Count.rds")
rawcount[1:5,1:5]
info <- cbind.data.frame(x=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",1)),
y=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",2)),
total_counts=apply(rawcount,2,sum))
rownames(info) <- colnames(rawcount)
spark <- CreateSPARKObject(counts=rawcount,
location=info[,1:2],
percentage = 0.1,
min_total_counts = 10)
library('SPARK')
install.packages("/Users/andreas/Documents/Output/Learning/SpatialTranscriptomics/SPARK/SPARK-master/R",repos=NULL, type="source")
install.packages("/Users/andreas/Documents/Output/Learning/SpatialTranscriptomics/SPARK/SPARK-master/R/Spark.R",repos=NULL, type="source")
install.packages("Spark")
install.packages("Spark")
install:install_github("xzhoulab/SPARK")
devtools::install_github("xzhoulab/SPARK")
devtools::install_github("xzhoulab/SPARK",type = "binary")
devtools::install_github("xzhoulab/SPARK"",type = "binary"")
devtools::install_github("xzhoulab/SPARK")
devtools::install_github("xzhoulab/SPARK")
install.packages("doSNOW")
devtools::install_github("xzhoulab/SPARK")
install.packages("pbmcapply")
devtools::install_github("xzhoulab/SPARK")
library('SPARK')
load("Layer2_BC_Count.rds")
rawcount[1:5,1:5]
info <- cbind.data.frame(x=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",1)),
y=as.numeric(sapply(strsplit(colnames(rawcount),split="x"),"[",2)),
total_counts=apply(rawcount,2,sum))
rownames(info) <- colnames(rawcount)
spark <- CreateSPARKObject(counts=rawcount,
location=info[,1:2],
percentage = 0.1,
min_total_counts = 10)
spark@lib_size <- apply(spark@counts, 2, sum)
spark <- spark.vc(spark,
covariates = NULL,
lib_size = spark@lib_size,
num_core = 5,
verbose = F)
spark <- spark.test(spark,
check_positive = T,
verbose = F)
head(spark@res_mtest[,c("combined_pvalue","adjusted_pvalue")])
source("internal.R")
library(iSEE)
iSee(see)
iSEE(see)
see
iSEE()
sce <- readRDS(url("https://www.dropbox.com/s/gcxw3ccvmpnjohz/iSEEWorkshop2020_SCE.rds?dl=1"))
iSEE(see)
iSEE(sce)
library(ggplot2)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(dsamp, aes(x=cut, y=price,fill=cut))
p + geom_boxplot()
ggplot( dsamp, aes( x = carat, y = price)) +
geom_point()
theme_set(theme_bw())
ggplot( dsamp, aes( x = carat, y = price)) +
geom_point()
theme_set(theme_bw())
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
ggsave("OurPlot.pdf", plot = gg)
old_theme <- theme_set(theme_classic())
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
#old_theme <- theme_set(theme_bw())
old_theme <- theme_set(theme_minimal())
#old_theme <- theme_set(theme_classic())
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
library(ggplot2)
diamonds
head(diamonds,n=3)
summary(diamonds)
head(diamonds,n=3)
summary(diamonds)
nrow(diamonds)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot( dsamp, aes( x = carat, y = price)) +
geom_point()
(d <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)))
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
#old_theme <- theme_set(theme_bw())
old_theme <- theme_set(theme_minimal())
#old_theme <- theme_set(theme_classic())
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
#old_theme <- theme_set(theme_bw())
#old_theme <- theme_set(theme_minimal())
old_theme <- theme_set(theme_classic())
(gg <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)) +
scale_colour_brewer(palette="Greens"))
ggsave("OurPlot.pdf", plot = gg)
p <- ggplot(dsamp, aes(x=cut, y=price,fill=cut))
p + geom_boxplot()
p + geom_violin()
library("ggbeeswarm")
p + geom_beeswarm(aes(color = cut)) +  scale_colour_brewer(palette="Reds")
ggplot(dsamp, aes( x = price, color = cut)) + geom_density()
ggplot(dsamp, aes( x = price, color = cut)) + geom_histogram()
ggplot(dsamp, aes( x = price, color = cut)) + geom_density()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
install.packages("rlang")
install.packages("rlang")
library(shiny)
runExample("01_hello")
library(rlang)
sessionInfo()
shiny::runApp('Documents/NoiseRecognizer_WorkingVersion/FINDER/Auxiliary/app')
setwd("~/Documents/NoiseRecognizer_WorkingVersion/FINDER/Auxiliary")
shiny::runApp('app')
library(shiny)
#source("helpers.R")
library(maps)
library(mapproj)
library("plotly")
library(pivottabler)
#library(dplyr)
#library("ggplot2")
#library(feather)
library(reshape2)
foldername     <- "../../../MikeData/ReferenceCheck/";
data_ps <- read.csv(paste(foldername,"results_phasespacedataWindow_1.csv",sep=""),header=TRUE)
foldername     <- "../../MikeData/ReferenceCheck/";
data_ps <- read.csv(paste(foldername,"results_phasespacedataWindow_1.csv",sep=""),header=TRUE)
data_ps
foldername     <- "../../MikeData/ReferenceCheck/";
data_labels <- read.csv(paste(foldername,"dataWindow_1_labels_noise.txt",sep=""),header=FALSE,sep="\t")
paste(foldername,"dataWindow_1_labels_noise.txt",sep="")
data_labels[,0]
data_labels[,1]
data_ps <- read.csv(paste(foldername,"results_phasespacedataWindow_1.csv",sep=""),header=TRUE)
data_ps
data_ps$sigma
runApp('app')
data_ps[1]
data_ps$X
data_ps$X[1]
data_ps$X[1]
data_ps$threshold[1]
runApp('app')
data   <- read.csv(paste(foldername,"results_dataWindow_1.csv",sep=""), header = TRUE)
dataP <- data %>% filter(type=="signal");
colnames(data)
data_table <- acast(dataP, threshold~sigma, value.var="no_clusters",mean)
colnames(data_table)
rownames(data_table)
runApp('app')
data
min(data_ps$sigma)
min(data_ps$threshold)
runApp('app')
(data_ps$threshold-0.2)
runApp('app')
runApp()
runApp('app')
runApp('app')
runApp('app')
which.min(abs(input$sliderThreshold - data_ps$threshold) + abs(input$sliderSigma - data_ps$sigma))
which.min(abs(1 - data_ps$threshold) + abs(1 - data_ps$sigma))
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
foldername     <- "../../MikeData/Output_R/";
data_clusterSizes <- read.csv(paste(foldername,"",sep="dataWindow_1_clusterSizes.txt"),header=FALSE,sep=" ")
data_clusterSizes
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
print(line)
break;
}
close(con)
}
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- as.numeric(strsplit(line, split=", "))
print(arr)
break;
}
close(con)
}
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- as.numeric(strsplit(line, split=" "))
print(arr)
break;
}
close(con)
}
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- (strsplit(line, split=" "))
print(arr)
break;
}
close(con)
}
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- (strsplit(line, split=" "))[1]
print(arr)
break;
}
close(con)
}
processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- (strsplit(line, split=" "))
print(arr)
break;
}
close(con)
return(arr);
}
add <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
as.numeric(arr)
as.numeric(add)
add[1]
add[1][1]
add[1][1]1
add[1][1][1]
add[1,1]
add
len(addd)
len(add)
length(add)
length(add[0])
length(add[1])
length(add[2])
length(add[3])
add[22]
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- (strsplit(line, split=" "))
print(arr)
break;
}
close(con)
return(line);
}
add <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
add
add[1]
strsplit(add[1],split=" ")
sapply(strsplit((line), split=", "), function(x) mean(as.numeric(x)))
sapply(strsplit((line), split=" "), function(x) mean(as.numeric(x)))
sapply(strsplit((add), split=" "), function(x) mean(as.numeric(x)))
sapply(strsplit((add), split=" "), function(x) (as.numeric(x)))
lapply(strsplit((add), split=" "), function(x) (as.numeric(x)))
processFile = function(filepath) {
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- lapply(strsplit((line), split=" "), function(x) (as.numeric(x)))
print(arr)
break;
}
close(con)
return(arr);
}
add <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
add
processFile = function(filepath) {
l<-c();
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- lapply(strsplit((line), split=" "), function(x) (as.numeric(x)))
l <- c(l,arr);
#print(arr)
#break;
}
close(con)
return(l);
}
data_clusterSizes <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
data_clusterSizes[2]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
data_clusterSizes[1]
data_clusterSizes[1]
plot_ly(x=data_clusterSizes[1],type='histogram')
runApp('app')
processFile = function(filepath) {
l<-c();
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- sapply(strsplit((line), split=" "), function(x) (as.numeric(x)))
l <- c(l,arr);
#print(arr)
#break;
}
close(con)
return(l);
}
data_clusterSizes <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
plot_ly(x=data_clusterSizes[1],type='histogram')
data_clusterSizes[1]
data_clusterSizes[2]
data_clusterSizes
processFile = function(filepath) {
l<-c();
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
arr <- lapply(strsplit((line), split=" "), function(x) (as.numeric(x)))
l <- c(l,arr);
#print(arr)
#break;
}
close(con)
return(l);
}
data_clusterSizes <- processFile(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""))
data_clusterSizes[1]
plot_ly(y=data_clusterSizes[1],type='histogram')
plot_ly(y=data_clusterSizes[1],histfunc='sum',type='histogram')
plot_ly(y=data_clusterSizes[2],histfunc='sum',type='histogram')
plot_ly(x=data_clusterSizes[2],histfunc='sum',type='histogram')
plot_ly(x=data_clusterSizes[2],histfunc='sum',type='histogram', bingroup=1)
plot_ly(x=data_clusterSizes[1],histfunc='sum',type='histogram', bingroup=1)
data_clusterSizes <- read.csv(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""),header=FALSE,sep="\t");
data_clusterSizes <- read.csv(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""),header=FALSE,sep=",");
data_clusterSizes <- read.csv(paste(foldername,"dataWindow_1_clusterSizes.txt",sep=""),header=TRUE,sep=",");
runApp('app')
data_clusterSizes %>% filter(index==idx()-1)
data_clusterSizes %>% filter(index==2-1)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
